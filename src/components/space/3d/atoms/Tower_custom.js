/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei/useGLTF";
import * as THREE from "three";

export default function Model(props) {
  const createMaterial = (color) => {
    return new THREE.MeshPhongMaterial({
      color: color,
      side: THREE.DoubleSide,
    });
  };

  const fa_red = "#e41b14";
  let interactive_material = createMaterial(fa_red);

  const group = useRef();
  const { nodes, materials } = useGLTF("/tower_texture_02.glb");
  console.log(nodes);

  //   for (const [key, value] of Object.entries(nodes)) {
  //     console.log(`${key}: ${value.material}`);
  //   }

  //

  const mesh_floors = {
    // Mesh_offsite: 100,
    Mesh000: 0,
    Mesh000_1: 0,
    Mesh000_2: 0,
    Mesh000_3: 0,
    Mesh000_4: 0,
    Mesh000_5: 0,
    Mesh001: 1,
    Mesh001_1: 1,
    Mesh001_2: 1,
    Mesh001_3: 1,
    Mesh001_4: 1,
    Mesh001_5: 1,
    Mesh002: 2,
    Mesh002_1: 2,
    Mesh002_2: 2,
    Mesh002_3: 2,
    Mesh002_4: 2,
    Mesh002_5: 2,
    Mesh003: 3,
    Mesh003_1: 3,
    Mesh003_2: 3,
    Mesh003_3: 3,
    Mesh003_4: 3,
    Mesh003_5: 3,
    Mesh004: 4,
    Mesh004_1: 4,
    Mesh004_2: 4,
    Mesh004_3: 4,
    Mesh004_4: 4,
    Mesh004_5: 4,
    Mesh005: 5,
    Mesh005_1: 5,
    Mesh005_2: 5,
    Mesh005_3: 5,
    Mesh005_4: 5,
    Mesh005_5: 5,
    Mesh006: 6,
    Mesh006_1: 6,
    Mesh006_2: 6,
    Mesh006_3: 6,
    Mesh006_4: 6,
    Mesh006_5: 6,
    Mesh007: 7,
    Mesh007_1: 7,
    Mesh007_2: 7,
    Mesh007_3: 7,
    Mesh007_4: 7,
    Mesh007_5: 7,
    Mesh008: 8,
    Mesh008_1: 8,
    Mesh008_2: 8,
    Mesh008_3: 8,
    Mesh008_4: 8,
    Mesh008_5: 8,
    Mesh009: 9,
    Mesh009_1: 9,
    Mesh009_2: 9,
    Mesh009_3: 9,
    Mesh009_4: 9,
    Mesh009_5: 9,
    Mesh010: 10,
    Mesh010_1: 10,
    Mesh010_2: 10,
    Mesh010_3: 10,
    Mesh010_4: 10,
    Mesh010_5: 10,
    Mesh011: 11,
    Mesh011_1: 11,
    Mesh011_2: 11,
    Mesh011_3: 11,
    Mesh011_4: 11,
    Mesh011_5: 11,
    Mesh012: 12,
    Mesh012_1: 12,
    Mesh012_2: 12,
    Mesh012_3: 12,
    Mesh012_4: 12,
    Mesh012_5: 12,
    Mesh013: 13,
    Mesh013_1: 13,
    Mesh013_2: 13,
    Mesh013_3: 13,
    Mesh013_4: 13,
    Mesh013_5: 13,
    Mesh014: 14,
    Mesh014_1: 14,
    Mesh014_2: 14,
    Mesh014_3: 14,
    Mesh014_4: 14,
    Mesh014_5: 14,
    Mesh015: -1,
    Mesh015_1: -1,
    Mesh015_2: -1,
    Mesh015_3: -1,
    Mesh015_4: -1,
    Mesh015_5: -1,
    Mesh016: 16,
    Mesh016_1: 16,
    Mesh016_2: 16,
    Mesh016_3: 16,
    Mesh016_4: 16,
    Mesh016_5: 16,
    Mesh017: 17,
    Mesh017_1: 17,
    Mesh017_2: 17,
    Mesh017_3: 17,
    Mesh017_4: 17,
    Mesh017_5: 17,
    Mesh018: 18,
    Mesh018_1: 18,
    Mesh018_2: 18,
    Mesh018_3: 18,
    Mesh018_4: 18,
    Mesh018_5: 18,
    Mesh019: 19,
    Mesh019_1: 19,
    Mesh019_2: 19,
    Mesh019_3: 19,
    Mesh019_4: 19,
    Mesh019_5: 19,
    POLYFACE004: 20,
    POLYFACE004_1: 20,
    POLYFACE004_2: 20,
    POLYFACE004_3: 20,
    POLYFACE004_4: 20,
    POLYFACE004_5: 20,
    Plane007: -2,
    Plane007_1: -2,
    Plane007_2: -2,
    Plane007_3: -2,
    Plane007_4: -2,
    Plane001: -3,
    Plane001_1: -3,
    Plane001_2: -3,
    Plane001_3: -3,
    Plane001_4: -3,
    Plane001_5: -3,
    Plane001_6: -3,
    Plane014: -4,
    Plane014_1: -4,
    Plane014_2: -4,
    Plane014_3: -4,
    Plane014_4: -4,
    Plane014_5: -4,
    Plane014_6: -4,
    Plane103: -5,
    Plane103_1: -5,
    Plane103_2: -5,
    Plane103_3: -5,
    Plane103_4: -5,
    Plane103_5: -5,
    Plane103_6: -5,
    Plane103_7: -5,
    Plane103_8: -5,
    Plane000: -6,
    Plane000_1: -6,
    Plane000_2: -6,
  };

  const locations_floors = {
    "016": mesh_floors["Mesh001"],
    L04: mesh_floors["Mesh004"],
    L0E: mesh_floors["Plane103"],
    "Off site": mesh_floors["POLYFACE004"],
    S0E: mesh_floors["Mesh000"],
    LB0: mesh_floors["Mesh000"],
    "000": mesh_floors["Plane103"],
    L07: mesh_floors["Mesh007"],
    "095": mesh_floors["Mesh009"],
    133: mesh_floors["Mesh013"],
    L10: mesh_floors["Mesh010"],
    LF10: mesh_floors["Mesh010"],
    L16: mesh_floors["Mesh016"],
    S03: mesh_floors["Mesh003"],
    L03: mesh_floors["Mesh003"],
    L02: mesh_floors["Mesh002"],
    S12: mesh_floors["Mesh012"],
    115: mesh_floors["Mesh011"],
    "092": mesh_floors["Mesh009"],
    L09: mesh_floors["Mesh009"],
    "n/a": mesh_floors["POLYFACE004"],
    194: mesh_floors["Mesh018"],
    205: mesh_floors["Mesh019"],
    L20: mesh_floors["Mesh019"],
  };

  console.log(locations_floors);

  const mesh_list = Object.keys(mesh_floors);

  const selected = props.selected;

  let selected_floor = 100;

  if (selected.length > 0) {
    const firstSelected = selected[0];
    const eventLocation = firstSelected.location.split("-")[0].trim();
    // eventLocation === "016" ? setActive(true) : setActive(false);
    // const selected_floor_mesh = locations_floors[eventLocation];
    selected_floor = locations_floors[eventLocation];
    // const flat_16_selected = eventLocation === "016";
    // interactive_material = createMaterial(flat_16_selected ? fa_red : "white");
  }

  const wall_material = nodes.Mesh000_1.material.name;
  const floor_material = nodes.Mesh000_2.material.name;
  const cladding_material = nodes.Mesh000_3.material.name;
  const getMaterial = (meshName) => {
    const mesh_material_name = nodes[meshName].material.name;
    let material = mesh_material_name;
    mesh_material_name === wall_material
      ? (material = materials[cladding_material])
      : (material = materials[mesh_material_name]);

    // mesh_material_name === cladding_material
    //   ? (material = materials[wall_material])
    //   : (material = materials[mesh_material_name]);
    material.transparent = true;
    const opacity = mesh_floors[meshName] === selected_floor ? 1 : 0.1;
    material.opacity = opacity;
    return material;
  };

  const myMeshes = mesh_list.map((meshName) => {
    const selected_mesh =
      materials[nodes[meshName].material.name] ===
        materials[nodes.Mesh000_2.material.name] &&
      mesh_floors[meshName] === selected_floor;
    return (
      <mesh
        castShadow
        receiveShadow
        // visible={mesh_floors[meshName] <= selected_floor}
        // material-color={mesh_floors[meshName] === 3 ? "red" : null}
        material={selected_mesh ? interactive_material : getMaterial(meshName)}
        // material-color={
        //   mesh_floors[meshName] <= selected_floor ? "white" : "red"
        // }
        geometry={nodes[meshName].geometry}
      />
    );
  });

  return (
    <group>
      {/* <mesh
        visible={true}
        material={materials[nodes.Mesh000.material.name]}
        geometry={nodes.Mesh000.geometry}
      /> */}

      {myMeshes}
    </group>
  );
}

useGLTF.preload("/tower.glb");
